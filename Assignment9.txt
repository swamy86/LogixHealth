-- create SALESMAN table
CREATE TABLE SALESMAN (
  SALESMAN_ID INTEGER PRIMARY KEY,
  NAME VARCHAR(20),
  CITY VARCHAR(20),
  COMMISSION DECIMAL(5,5)
);
-- insert values
INSERT INTO SALESMAN VALUES (5001, 'James Hoog', 'New York', 0.15);
INSERT INTO SALESMAN VALUES (5002, 'Nail Knite', 'Paris' ,0.13);
INSERT INTO SALESMAN VALUES (5005, 'Pit Alex','London', 0.11);
INSERT INTO SALESMAN VALUES (5006,  'Mc Lyon', 'Paris' ,0.14);
INSERT INTO SALESMAN VALUES (5007,  'Paul Adam', 'Rome' , 0.13);
INSERT INTO SALESMAN VALUES (5003,  'Lauson Hen', 'San Jose' ,0.12);


-- create CUSTOMER table
CREATE TABLE CUSTOMER (
  CUSTOMER_ID INTEGER PRIMARY KEY,
  CUSTOMER_NAME VARCHAR(20),
  CITY VARCHAR(20),
  GRADE INTEGER,
  SALESMAN_ID	 INTEGER FOREIGN KEY REFERENCES salesman(SALESMAN_ID)
);
-- insert values
INSERT INTO CUSTOMER VALUES (3002, 'Nick Rimando' ,'New York',  100 ,5001);
INSERT INTO CUSTOMER VALUES (3007, 'Brad Davis',  'New York' , 200, 5001);
INSERT INTO CUSTOMER VALUES (3005, 'Graham Zusi', 'California' ,200 ,5002);
INSERT INTO CUSTOMER VALUES (3008 ,'Julian Green', 'London' , 300, 5002);
INSERT INTO CUSTOMER VALUES (3004, 'Fabian Johnson' ,'Paris' , 300, 5006);
INSERT INTO CUSTOMER VALUES (3009, 'Geoff Cameron', 'Berlin',  100, 5003);
INSERT INTO CUSTOMER VALUES (3003 ,'Jozy Altidor', 'Moscow', 200,  5007);
INSERT INTO CUSTOMER VALUES (3001, 'Brad Guzan', 'London' ,NULL, 5005);


-- create ORDERS table
CREATE TABLE ORDERS (
  ORDER_NO INTEGER PRIMARY KEY,
  PURCHASE_AMOUNT DECIMAL(10,5),
  ORDER_DATE date,
  CUSTOMER_ID INTEGER FOREIGN KEY REFERENCES customer(CUSTOMER_ID),
  SALESMAN_ID INTEGER FOREIGN KEY REFERENCES salesman(SALESMAN_ID)
);
-- insert some values
INSERT INTO ORDERS VALUES (70001, 150.5, '2012-10-05', 3005, 5002);
INSERT INTO ORDERS VALUES (70009, 270.65, '2012-09-10', 3001, 5005);
INSERT INTO ORDERS VALUES (70002, 65.26 ,'2012-10-05' ,3002, 5001);
INSERT INTO ORDERS VALUES (70004, 110.5, '2012-08-17', 3009, 5003);
INSERT INTO ORDERS VALUES (70007, 948.5, '2012-09-10', 3005, 5002);
INSERT INTO ORDERS VALUES (70005, 2400.6, '2012-07-27', 3007, 5001);
INSERT INTO ORDERS VALUES (70008, 5760, '2012-09-10', 3002, 5001);
INSERT INTO ORDERS VALUES (70010, 1983.43, '2012-10-10', 3004, 5006);
INSERT INTO ORDERS VALUES (70003, 2480.4, '2012-10-10', 3009, 5003);
INSERT INTO ORDERS VALUES (70012, 250.45, '2012-06-27', 3008, 5002);
INSERT INTO ORDERS VALUES (70011, 75.29, '2012-08-17', 3003, 5007);
INSERT INTO ORDERS VALUES (70013, 3045.6, '2012-04-25', 3002, 5001);




	
--(1) Find all the orders issued by the salesman 'Paul Adam'. Return ORDER_NO, PURCHASE_AMOUNT, ORDER_DATE, CUSTOMER_ID and SALESMAN_ID.
SELECT ORDER_NO,PURCHASE_AMOUNT,ORDER_DATE,CUSTOMER_ID,SALESMAN_ID FROM orders
WHERE salesman_id = (SELECT salesman_id FROM salesman WHERE NAME='Paul Adam');


--(2) Display all the orders for the salesman who resides in London.
SELECT * FROM orders
WHERE salesman_id IN (SELECT salesman_id FROM salesman WHERE city='London');


--(3) Find all the orders issued against the salesman who works for the customer whose id is 3004.
SELECT * FROM orders
WHERE salesman_id =(SELECT salesman_id FROM orders WHERE customer_id =3004);


--(4) Display all those orders for which the values are greater than the average order value for 10th Oct 2012.
SELECT * FROM orders
WHERE PURCHASE_AMOUNT >(SELECT  AVG(PURCHASE_AMOUNT) FROM orders WHERE ORDER_DATE ='2012-10-10');

--(5) Find all the orders generated in Paris city.
SELECT * FROM orders
WHERE salesman_id IN (SELECT salesman_id FROM salesman WHERE CITY='Paris');

--(6) Display the commissions of all the salesman who are servicing New York customers.
SELECT commission FROM salesman
WHERE salesman_id IN (SELECT salesman_id FROM customer WHERE city = 'New York');


--(7) Count the number of customers with grades above the average in New York city. Return grade and count.
SELECT grade, COUNT (*) FROM customer GROUP BY grade
HAVING grade >(SELECT AVG(grade) FROM customer WHERE city = 'New York');


--(8) Find those salespeople who earned the maximum commission. Return ORDER_NO, PURCHASE_AMOUNT, ORDER_DATE and SALESMAN_ID.
SELECT order_no, purchase_amount, order_date, salesman_id 
FROM orders 
WHERE salesman_id IN(SELECT salesman_id FROM salesman
WHERE commission = (SELECT MAX(commission) FROM salesman));


--(9) Find the customers who placed orders on 17 August 2012. Return ORDER_NO, PURCHASE_AMOUNT, ORDER_DATE, CUSTOMER_ID, SALESMAN_ID and CUSTOMER_NAME.
SELECT o.*, CUSTOMER_NAME
FROM orders o, customer c
WHERE c.customer_id=o.customer_id
AND order_date='2012-08-17';


--(10) Find salespeople who had more than one customer. Return SALESMAN_ID and NAME.
SELECT salesman_id,name FROM salesman a 
WHERE 1 < (SELECT COUNT(*) FROM customer WHERE salesman_id=a.salesman_id);


--(11) Find those orders which are higher than the average amount of the orders. Return ORDER_NO, PURCHASE_AMOUNT, ORDER_DATE, 
   -- CUSTOMER_ID and SALESMAN_ID.
SELECT * FROM orders a
WHERE PURCHASE_AMOUNT >(SELECT AVG(PURCHASE_AMOUNT) FROM orders);


--(12) Find the sums of the amounts from the orders table, grouped by date, and eliminate all dates where the sum was not at 
    --least 1000.00 above the maximum order amount for that date.
SELECT order_date, SUM (purchase_amount) FROM orders GROUP BY order_date
HAVING SUM (purchase_amount) > (SELECT 1000.00 + MAX(purchase_amount) FROM orders);


--(13) Extract all data from the customer table if and only if one or more of the customers in the customer table are located in London.
SELECT * FROM customer WHERE EXISTS (SELECT * FROM customer WHERE city='London');


--(14) Find salespeople who deal with multiple customers. Return SALESMAN_ID, NAME, CITY and COMMISSION.
SELECT * FROM salesman WHERE salesman_id IN (
   SELECT DISTINCT salesman_id FROM customer a 
   WHERE EXISTS (SELECT * FROM customer b WHERE b.salesman_id=a.salesman_id AND b.customer_name!=a.customer_name));

ELECT S.SALESMAN_ID,NAME,CITY,COMMISSION FROM SALESMAN S
WHERE 1 < (SELECT COUNT(*) FROM CUSTOMER C WHERE S.SALESMAN_ID  = C.SALESMAN_ID )


--(15) Find the salespeople who deal with those customers who live in the same city. Return SALESMAN_ID, NAME, CITY and COMMISSION.
SELECT * FROM salesman 
WHERE city=ANY(SELECT city FROM customer);


--(16) Find salespeople whose place of residence matches any city where customers live. Return SALESMAN_ID, NAME, CITY and COMMISSION.
SELECT * FROM salesman 
WHERE city IN (SELECT city FROM customer);


--(17) Find all those salespeople whose names appear alphabetically lower than the customerâ€™s name. Return SALESMAN_ID, NAME, CITY, COMMISSION.
SELECT * FROM salesman s
WHERE EXISTS (SELECT * FROM CUSTOMER c WHERE  s.name  < c.customer_name);


--(18) Find all those customers with a higher grade than any customer who belongs to the alphabetically lower than the city New York.
   --Return CUSTOMER_ID, CUSTOMER_NAME, CITY, GRADE, SALESMAN_ID.
SELECT * FROM customer
WHERE grade > ANY(SELECT grade FROM CUSTOMER WHERE  city < 'New York');


--(19) Find all those orders whose order amount exceeds at least one of the orders placed on September 10th 2012. 
   --Return ORDER_NO, PURCHASE_AMOUNT, ORDER_DATE, CUSTOMER_ID and SALESMAN_ID.
SELECT * FROM Orders
WHERE purchase_amount > ANY(SELECT purchase_amount FROM orders WHERE  order_date='2012-09-10');


--(20) Find orders where the order amount is less than the order amount of a customer residing in London City. 
   --Return ORDER_NO, PURCHASE_AMOUNT, ORDER_DATE, CUSTOMER_ID and SALESMAN_ID.
SELECT * FROM orders
WHERE purchase_amount < ANY(SELECT purchase_amount FROM orders o, customer c WHERE  o.customer_id=c.customer_id AND c.city='London');


--(21) Find those orders where every order amount is less than the maximum order amount of a customer who lives in London City.
    --Return ORDER_NO, PURCHASE_AMOUNT, ORDER_DATE, CUSTOMER_ID and SALESMAN_ID.
SELECT * FROM orders
WHERE purchase_amount < (SELECT MAX (purchase_amount) FROM orders o, customer c WHERE  o.customer_id=c.customer_id AND c.city='London');


--(22) Find those customers whose grades are higher than those living in New York City. Return CUSTOMER_ID, CUSTOMER_NAME, CITY, GRADE and SALESMAN_ID.
SELECT * FROM customer
WHERE grade > ALL(SELECT grade FROM customer WHERE city='New York');


--(23) Find those customers whose grades are different from those living in Paris. Return CUSTOMER_ID, CUSTOMER_NAME, CITY, GRADE and SALESMAN_ID.
SELECT * FROM customer 
WHERE grade NOT IN (SELECT grade FROM customer WHERE city='Paris');


--(24) Find all those customers who have different grades than any customer who lives in Dallas City. Return CUSTOMER_ID, CUSTOMER_ID, CITY, GRADE and SALESMAN_ID.
SELECT * FROM customer 
WHERE NOT grade = ANY(SELECT grade FROM customer WHERE city='Dallas');


--(25) Display the name of all the salesman. [Use ALL Operator]
SELECT ALL NAME FROM SALESMAN;
