-- create salesman table
CREATE TABLE salesman (
  salesman_id INTEGER PRIMARY KEY,
  name VARCHAR(20),
  city VARCHAR(20),
  comission DECIMAL(5,5)
);
-- insert values
INSERT INTO salesman VALUES (5001, 'James Hoog', 'New York', 0.15);
INSERT INTO salesman VALUES (5002, 'Nail Knite', 'Paris' ,0.13);
INSERT INTO salesman VALUES (5005, 'Pit Alex','London', 0.11);
INSERT INTO salesman VALUES (5006,  'Mc Lyon', 'Paris' ,0.14);
INSERT INTO salesman VALUES (5007,  'Paul Adam', 'Rome' , 0.13);
INSERT INTO salesman VALUES (5003,  'Lauson Hen', 'San Jose' ,0.12);


-- create customer table
CREATE TABLE customer (
  customer_id INTEGER PRIMARY KEY,
  customer_name VARCHAR(20),
  city VARCHAR(20),
  grade INTEGER,
  salesman_id INTEGER FOREIGN KEY REFERENCES salesman(salesman_id)
);
-- insert values
INSERT INTO customer VALUES (3002, 'Nick Rimando' ,'New York',  100 ,5001);
INSERT INTO customer VALUES (3007, 'Brad Davis',  'New York' , 200, 5001);
INSERT INTO customer VALUES (3005, 'Graham Zusi', 'California' ,200 ,5002);
INSERT INTO customer VALUES (3008 ,'Julian Green', 'London' , 300, 5002);
INSERT INTO customer VALUES (3004, 'Fabian Johnson' ,'Paris' , 300, 5006);
INSERT INTO customer VALUES (3009, 'Geoff Cameron', 'Berlin',  100, 5003);
INSERT INTO customer VALUES (3003 ,'Jozy Altidor', 'Moscow', 200,  5007);
INSERT INTO customer VALUES (3001, 'Brad Guzan', 'London' , ' ' , 5005);


-- create orders table
CREATE TABLE orders (
  order_no INTEGER PRIMARY KEY,
  purchase_amt INTEGER,
  order_date date,
  customer_id INTEGER FOREIGN KEY REFERENCES customer(customer_id),
  salesman_id INTEGER FOREIGN KEY REFERENCES salesman(salesman_id)
);
-- insert some values
INSERT INTO orders VALUES (70001, 150.5, '2012-10-05', 3005, 5002);
INSERT INTO orders VALUES (70009, 270.65, '2012-09-10', 3001, 5005);
INSERT INTO orders VALUES (70002, 65.26 ,'2012-10-05' ,3002, 5001);
INSERT INTO orders VALUES (70004, 110.5, '2012-08-17', 3009, 5003);
INSERT INTO orders VALUES (70007, 948.5, '2012-09-10', 3005, 5002);
INSERT INTO orders VALUES (70005, 2400.6, '2012-07-27', 3007, 5001);
INSERT INTO orders VALUES (70008, 5760, '2012-09-10', 3002, 5001);
INSERT INTO orders VALUES (70010, 1983.43, '2012-10-10', 3004, 5006);
INSERT INTO orders VALUES (70003, 2480.4, '2012-10-10', 3009, 5003);
INSERT INTO orders VALUES (70012, 250.45, '2012-06-27', 3008, 5002);
INSERT INTO orders VALUES (70011, 75.29, '2012-08-17', 3003, 5007);
INSERT INTO orders VALUES (70013, 3045.6, '2012-04-25', 3002, 5001);


--(1) To find the salesperson and customer who reside in the same city. Return Salesman_Name, Customer_Name and City.
Select name as Salesman_Name, customer_name, customer.city
from salesman JOIN customer on salesman.city = customer.city


--(2) To find those orders where the Purchase_Amount exists between 500 and 2000.Return Order_No, Purchase_Amount, Customer_Name, City.
Select order_no, purchase_amt, customer_name, customer.city 
from orders join customer on orders.customer_id = customer. customer_id
Where purchase_amt between 500 AND 2000;


--(3) To find the salesperson(s) and the customer(s) he represents. Return Customer_Name, City, Salesman_Name, Commission.
Select customer_name,customer.city, name as 'Salesman_Name', comission
from customer join Salesman on customer.salesman_id = Salesman.salesman_id;


--(4) To find salespeople who received commissions of more than 12 percent from the company. Return Customer_Name, Customer_City, Salesman_Name, Commission.
Select customer_name,customer.city as 'Customer_City', name as 'Salesman_Name', Comission
from Customer inner join Salesman on  customer.salesman_id= salesman.salesman_id
where comission > 0.12


--(5) To locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company.
     --Return Customer_Name, Customer_City,Salesman_Name, Salesman_City, Commission.
select customer_name,customer.city,salesman.name,salesman.city,comission 
from customer inner join salesman on customer.salesman_id=salesman.salesman_id
where comission > 0.12 and customer.City != salesman.City;


--(6)To find the details of an order. Return Order_No, Order_Date, Purchase_Amount, Customer_Name, Grade, Salesman_Name, Commission.
Select order_no,order_date, purchase_amt, customer_name, grade, name,comission 
from orders join customer on customer.customer_id= orders.customer_id 
join Salesman on salesman.salesman_id = orders.salesman_id;


--(7) To display the Customer_Name, Customer_City, Grade, Salesman_Name, Salesman_City.
--The results should be sorted by ascending order of Customer_Id.
Select customer_name, customer.city, grade, name, salesman.city
from customer join salesman on customer.salesman_id = salesman.salesman_id 
order by customer_id;


--(8) To find those customers with a grade less than 300. Return Customer_Name, Customer_City, Grade, Salesman_Name, Salesman_City. 
--The results should be sorted by ascending order of Customer_Id.
Select customer_name, customer.city, grade, name, salesman.city
from customer left join salesman on customer.salesman_id = salesman.salesman_id
where grade < 300
order by customer_id;


--(9) To make a report with Customer_Name, Customer_City, Order_No, Order_Date, and Purchase_Amount in ascending order 
     --according to the order date to determine whether any of the existing customers have placed an order or not.
Select customer_name, customer.city, order_no, order_date, purchase_amt
from customer left join orders on customer.customer_id = orders.customer_id
order by order_date;


--(10) To generate a report with Customer_Name, Customer_City, Order_No, Order_Date, Purchase_Amount, Salesperson_Name,
     --and Commission to determine if any of the existing customers have not placed orders or 
	 --if they have placed orders through their salesman or by themselves.
Select customer_name, customer.city, order_no, order_date, purchase_amt, name, comission
from customer
left join orders on customer.customer_id = orders.customer_id
left join Salesman on orders.salesman_id = salesman.salesman_id;


--(11) To generate a list in ascending order of salespersons who work either for one or more customers or 
       --have not yet joined any of the customers. Return Customer_Name, Customer_City, Customer_Grade,Salesman_Name, Salesman_City.
Select customer_name, customer.city, grade,name, salesman.city
from salesman 
left join customer on customer.salesman_id = salesman.salesman_id
order by name;


--(12) For those customers from the existing list who have put one or more orders, or which orders have been placed by the customer
  --who is not on the list, create a report containing the Customer_Name,Customer_City, Order_No, Order_Date, and Purchase_Amount.
Select customer_name, customer.city, order_no, order_date, purchase_amt
from customer left join orders on orders.customer_id = customer.customer_id


--(13) To generate a report with the Customer_Name, Customer_City, Order_No, Order_Date, Purchase_Amount 
       --for only those customers on the list who must have a grade and placed one or more orders or which
	   --order(s) have been placed by the customer who neither is on the list nor has a grade.
select customer_name,customer.city,order_no,order_date,purchase_amt 
FROM customer FULL OUTER JOIN orders ON customer.customer_id= orders.customer_id AND grade IS NOT NULL;


--(14) To combine each row of the Salesman table with each row of the Customer table.
SELECT * FROM salesman CROSS JOIN customer;


--(15)To create a Cartesian Product between Salesperson and Customer, i.e. each salesperson will appear for all 
      --customers and vice versa for that salesperson who belongs to that city.
SELECT * FROM salesman CROSS JOIN  customer
WHERE salesman.city IS NOT NULL; 


--(16) To create a Cartesian Product between Salesperson and Customer, i.e. each salesperson will appear for every customer 
     --and vice versa for those salesmen who belong to a city and customers who require a grade.
SELECT * FROM salesman CROSS JOIN  customer
WHERE salesman.city IS NOT NULL
AND grade IS NOT NULL;


--(17) To make a Cartesian Product between Salesman and Customer i.e. each salesman will appear for all customers and vice versa 
  --for those salesmen who must belong to a city which is not the same as his customer and the customers should have their own grade.
SELECT * FROM salesman CROSS JOIN customer
WHERE salesman.city IS NOT NULL AND customer.grade IS NOT NULL AND  salesman.city!=customer.city;
