--Online Movie Booking System
-- Users table
CREATE TABLE tbl_users (
    user_id VARCHAR(10) PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phoneNumber VARCHAR(10) NOT NULL UNIQUE,
    created_at DATETIME DEFAULT GETDATE()
);

INSERT INTO tbl_users (user_Id, Name, email, phoneNumber) VALUES 
  ('U1', 'johnsmith', 'johnsmith@example.com', '9876457888'),
  ('U2', 'janesmith', 'janesmith@example.com', '9886457898'),
  ('U3', 'alex', 'alex@example.com', '9876447808'),
  ('U4', 'alicewonderland', 'alice@example.com', '9888457898'),
  ('U5', 'johndoe', 'johndoe@example.com', '9876499898'),
  ('U6', 'janedoe', 'janedoe@example.com', '9876457898'),
  ('U7', 'franklinjones', 'franklin@example.com', '9873457898'),
  ('U8', 'jessicajones', 'jessica@example.com', '9996457898'),
  ('U9', 'clarkkent', 'clarkkent@example.com', '9870057898'),
  ('U10', 'dianaprince', 'diana@example.com', '9876457800');

-- Theatres table
CREATE TABLE tbl_theatres (
    theatre_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(200) NOT NULL
);

INSERT INTO tbl_theatres (theatre_id, name, address)
VALUES 
  ('T1', 'PVR Cinemas', 'kormangala,Banglore'),
  ('T2', 'PVP', 'Mallathahalli,Banglore'),
  ('T3', 'INOX', 'Koramangala,Banglore'),
  ('T4', 'Cinepollis', 'Koramangala,Banglore'),
  ('T5', 'Metro Inox Cinemas', 'Koramangala,Banglore');

-- Movies table
CREATE TABLE tbl_movies (
    movie_id VARCHAR(10) PRIMARY KEY,
    title VARCHAR(30) NOT NULL,
    description TEXT,
    duration INT,
    release_date DATE
);
INSERT INTO tbl_movies (movie_id, title, description, duration, release_date)
VALUES
('M1', 'Avengers: Endgame', 'The Avengers must undo Thanos'' actions and restore order to the universe', 182, '2023-04-26'),
('M2', 'The Dark Knight', 'Batman fights the Joker in a battle for Gotham City', 152, '2023-04-25'),
('M3', 'The Godfather', 'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son', 175, '2023-04-18'),
('M4', 'Inception', 'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.', 148, '2023-05-05'),
('M5', 'Titanic', 'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic', 194, '2023-05-01');

-- Screens table
CREATE TABLE tbl_screens (
    screen_id VARCHAR(10) PRIMARY KEY,
    theatre_id VARCHAR(10) NOT NULL,
    name VARCHAR(50) NOT NULL,
    capacity INT NOT NULL,
    FOREIGN KEY (theatre_id) REFERENCES tbl_theatres(theatre_id)
);
INSERT INTO tbl_screens (screen_id, theatre_id, name, capacity)
VALUES
('sc1', 't1', 'Screen 1', 80),
('sc2','t1', 'Screen 2', 80),
('sc3', 't2', 'Screen 1', 100),
('sc4', 't3', 'Screen 1', 100),
('sc5', 't4', 'Screen 1', 100),
('sc6', 't2', 'Screen 2', 100),
('sc7', 't3', 'Screen 2', 100),
('sc8', 't4', 'Screen 2', 100);


-- Shows table
CREATE TABLE tbl_shows (
    show_id VARCHAR(10) PRIMARY KEY,
    movie_id VARCHAR(10) NOT NULL,
    screen_id VARCHAR(10) NOT NULL,
	theatre_id VARCHAR(10) NOT NULL,
	show_time DATETIME NOT NULL,
    price INT NOT NULL,
    available_seats INT NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES tbl_movies(movie_id),
    FOREIGN KEY (screen_id) REFERENCES tbl_screens(screen_id),
	FOREIGN KEY (theatre_id) REFERENCES tbl_theatres(theatre_id)
);

INSERT INTO tbl_shows (show_id, movie_id, screen_id, theatre_id, show_time, price, available_seats)
VALUES
('sh1', 'm1', 'sc1', 't1', '2023-05-13 18:00:00', 200, 80),
('sh2', 'm2', 'sc2', 't1', '2023-05-13 20:30:00', 200, 80),
('sh3', 'm3', 'sc3', 't2', '2023-05-14 12:30:00', 200, 100),
('sh4', 'm4', 'sc4', 't3', '2023-05-13 19:00:00', 200, 100),
('sh5', 'm5', 'sc5', 't4', '2023-05-13 09:30:00', 200, 100),
('sh6', 'm1', 'sc6', 't2', '2023-05-13 09:30:00', 200, 100),
('sh7', 'm2', 'sc7', 't3', '2023-05-13 09:30:00', 200, 100),
('sh8', 'm1', 'sc8', 't4', '2023-05-13 18:00:00', 200, 100);

INSERT INTO tbl_shows (show_id, movie_id, screen_id, theatre_id, show_time, price, available_seats)
VALUES
('sh6', 'm1', 'sc6', 't2', '2023-05-13 09:30:00', 200, 100);

-- Bookings table
CREATE TABLE tbl_bookings (
    booking_id VARCHAR(10) PRIMARY KEY,
    user_id VARCHAR(10) NOT NULL,
    show_id VARCHAR(10) NOT NULL,
    total_tickets INT NOT NULL,
    total_price INT NOT NULL,
	payment_status VARCHAR(10),
    booking_time DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES tbl_users(user_id),
    FOREIGN KEY (show_id) REFERENCES tbl_shows(show_id)
);

-- Inserting records into tbl_bookings
INSERT INTO tbl_bookings(booking_id,user_id, show_id, total_tickets, total_price,payment_status)
VALUES
('b1', 'u1', 'sh1',5, 1000,'success'),
('b2', 'u2', 'sh2',5, 1000,'success'),
('b3', 'u3', 'sh3',3, 600,'success'),
('b4', 'u4', 'sh4',1, 200,'success'),
('b5', 'u5', 'sh5',4, 800,'success'),
('b6', 'u7', 'sh2',2, 400,'success'),
('b7', 'u8', 'sh3',2, 400,'success');



CREATE Table tbl_Ticket(
Ticket_ID varchar(20) PRIMARY KEY,
Booking_ID varchar(10),
Price int NOT NULL,
Foreign Key(Booking_ID) REFERENCES tbl_bookings(Booking_ID)
);
INSERT INTO tbl_Ticket VALUES
('tk1','b1',200),
('tk2','b1',200),
('tk3','b1',200),
('tk4','b1',200),
('tk5','b1',200),
('tk6','b2',200),
('tk7','b2',200),
('tk8','b2',200),
('tk9','b2',200),
('tk10','b2',200),
('tk11','b3',200),
('tk12','b3',200),
('tk13','b3',200),
('tk14','b4',200),
('tk15','b5',200),
('tk16','b5',200),
('tk17','b5',200),
('tk18','b5',200),
('tk19','b6',200),
('tk20','b6',200),
('tk21','b7',200),
('tk22','b7',200);


-- Reviews table
CREATE TABLE tbl_reviews (
    review_id VARCHAR(10) PRIMARY KEY,
	movie_id VARCHAR(10) NOT NULL,
    user_id VARCHAR(10) NOT NULL,
    rating INT NOT NULL,
	comment TEXT,
    FOREIGN KEY (user_id) REFERENCES tbl_users(user_Id),
    FOREIGN KEY (movie_id) REFERENCES tbl_movies(movie_id),
	CONSTRAINT review_info UNIQUE(user_id,movie_id)
);

INSERT INTO tbl_reviews (review_id,movie_id, user_id, rating, comment)
VALUES
('r1','m1', 'u1', 4, 'Great movie! The action scenes were amazing.'),
('r2','m1', 'u2', 5, 'This is one of the best movies I have ever seen.'),
('r3','m1', 'u3', 4, 'I enjoyed the movie overall, but the ending was a bit disappointing.'),
('r4','m2', 'u4', 4, 'A classic movie with great performances by the actors.'),
('r5','m2', 'u5', 3, 'I expected more from this movie.'),
('r6','m3', 'u6', 5, 'A masterpiece. The acting and direction were superb.'),
('r7','m3', 'u7', 4, 'The Godfather is a classic for a reason.'),
('r8','m4', 'u8', 4, 'A mind-bending movie with a great storyline.'),
('r9','m4', 'u9', 3, 'I had a hard time following the movie at times.'),
('r10','m5', 'u10', 5, 'A beautiful and heart-wrenching love story.');


--Audit table for movies
CREATE TABLE tbl_Movies_Audit(Id INT IDENTITY, AuditData TEXT);
SELECT * FROM tbl_Movies_Audit;

--Triggers
--Insert Trigger
ALTER TRIGGER tr_tblMovies_ForInsert
ON tbl_movies
FOR INSERT
AS
BEGIN
DECLARE @Id VARCHAR(10)
SELECT @Id=movie_Id FROM inserted
INSERT INTO tbl_Movies_Audit VALUES(' New movie with Id= '+@ID+' is added at '+CAST(GETDATE() AS VARCHAR))
END


INSERT INTO tbl_movies (movie_id, title, description, duration, release_date) VALUES ('M6', 'Forrest Gump', 'The presidencies of Kennedy and Johnson, the events of Vietnam, Watergate, and other historical events unfold through the perspective of an Alabama man with an IQ of 75.', 142, '2023-04-20');
SELECT * FROM tbl_movies;
SELECT * FROM tbl_Movies_Audit;

--Delete Trigger
CREATE TRIGGER tr_tblMovies_ForDelete
ON tbl_movies
FOR DELETE
AS
BEGIN
DECLARE @Id VARCHAR(10)
SELECT @Id=movie_Id FROM deleted
INSERT INTO tbl_Movies_Audit VALUES(' An Existing movie with Id= '+@ID+' is deleted at '+CAST(GETDATE() AS VARCHAR))
END

DELETE FROM tbl_movies WHERE movie_id='M6';
SELECT * FROM tbl_movies;
SELECT * FROM tbl_Movies_Audit;


CREATE TABLE tbl_users_Audit(Id INT IDENTITY, AuditData TEXT);
SELECT * FROM tbl_users_Audit;

--Insert Trigger
ALTER TRIGGER tr_tblUsers_ForInsert
ON tbl_users
FOR INSERT
AS
BEGIN
DECLARE @Id varchar(10)
SELECT @Id=User_Id FROM inserted
INSERT INTO tbl_users_Audit VALUES(' New User with Id= '+CAST(@ID AS VARCHAR)+' is added at '+CAST(GETDATE() AS VARCHAR))
END
INSERT INTO tbl_users (user_Id, Name, email, phoneNumber) VALUES ('U11', 'alex', 'alexd@example.com', '8876400800');
SELECT * FROM tbl_users;
SELECT * FROM tbl_users_Audit;

--Delete Trigger
CREATE TRIGGER tr_tblUsers_ForDelete
ON tbl_users
FOR DELETE
AS
BEGIN
DECLARE @Id VARCHAR(10)
SELECT @Id=User_Id FROM deleted
INSERT INTO tbl_users_Audit VALUES(' An Existing user with Id= '+CAST(@ID AS VARCHAR)+' is deleted at '+CAST(GETDATE() AS VARCHAR))
END
DELETE FROM tbl_users WHERE USER_ID='U11';
SELECT * FROM tbl_users_Audit;



--UPDATE Trigger
CREATE TRIGGER tr_tbl_Users_ForUpdate
ON tbl_users
FOR UPDATE
AS
BEGIN
DECLARE @userId VARCHAR(10)
DECLARE @OldName VARCHAR (30), @NewName VARCHAR(30)
DECLARE @OldEmail VARCHAR (30), @NewEmail VARCHAR(30)
DECLARE @OldphoneNumber VARCHAR (30), @NewphoneNumber VARCHAR(30)

DECLARE @AuditText VARCHAR(1000);

SELECT * INTO #TempTable FROM inserted

WHILE(EXISTS(SELECT @userId FROM #TempTable))
BEGIN
SET @AuditText=''

SELECT TOP 1 @userId=user_Id,@NewName=name,@NewEmail=email,@NewphoneNumber=phoneNumber FROM #TempTable
SELECT @OldName=name,@OldEmail=email,@OldphoneNumber=phoneNumber FROM deleted WHERE user_Id=@userId

SET @AuditText = ' user  with id= ' +@userId+' Changed'

if(@OldName<> @NewName)
SET @AuditText = @AuditText+ ' name from '+@OldName+ ' to '+ @NewName

if(@OldEmail<> @NewEmail)
SET @AuditText = @AuditText+ ' email from '+@OldEmail+ ' to '+ @NewEmail

if(@OldphoneNumber<> @NewphoneNumber)
SET @AuditText = @AuditText+ ' number from '+@OldphoneNumber+ ' to '+ @NewphoneNumber
INSERT INTO tbl_users_Audit VALUES (@AuditText)
DELETE FROM #TempTable WHERE user_Id=@UserId
END
END
SELECT * FROM tbl_users;
SELECT * FROM tbl_users_Audit

UPDATE tbl_users SET Name='JANE',phoneNumber='9899329123'  WHERE user_id='U11';


--STORED PROC 1
ALTER PROCEDURE spGetMovieNamesWithTheatreInfo
AS  
BEGIN  
    SELECT m.title, t.name AS theatre_name, t.address AS theatre_address
    FROM tbl_movies m
    INNER JOIN tbl_shows s ON m.movie_id = s.movie_id
    INNER JOIN tbl_theatres t ON s.theatre_id = t.theatre_id
END 
EXEC spGetMovieNamesWithTheatreInfo;


--STORED PROC 2
CREATE PROCEDURE get_show_info_by_movie_name_with_theatre_info
    @movie_name VARCHAR(30)
AS
BEGIN
    SELECT tbl_shows.show_id, tbl_shows.show_time, tbl_theatres.name AS theatre_name, tbl_theatres.address AS theatre_address
    FROM tbl_shows
    INNER JOIN tbl_movies ON tbl_shows.movie_id = tbl_movies.movie_id
    INNER JOIN tbl_theatres ON tbl_shows.theatre_id = tbl_theatres.theatre_id
    WHERE tbl_movies.title = @movie_name
END
EXEC get_show_info_by_movie_name_with_theatre_info 'The Dark Knight';



--Stored proc 3
CREATE PROCEDURE get_shows_with_theatre_info
AS
BEGIN
    SELECT s.show_id, m.title AS movie_name, t.name AS theatre_name, t.address AS theatre_location, s.show_time
    FROM tbl_shows s
    INNER JOIN tbl_movies m ON s.movie_id = m.movie_id
    INNER JOIN tbl_theatres t ON s.theatre_id = t.theatre_id
END
EXEC get_shows_with_theatre_info


--STORED PROC 4
ALTER PROCEDURE get_average_review_by_movie_name
    @movie_name VARCHAR(30)
AS
BEGIN
    SELECT AVG(rating) AS avg_rating
    FROM tbl_reviews r
    INNER JOIN tbl_movies m ON r.movie_id = m.movie_id
    WHERE m.title = @movie_name;
END
EXEC get_average_review_by_movie_name 'Avengers: Endgame';


--STORED PROC 5
CREATE PROCEDURE check_and_book_tickets
    @user_id VARCHAR(10),
    @show_id VARCHAR(10),
    @total_tickets INT
AS
BEGIN
    
    DECLARE @available_tickets INT;
    DECLARE @booking_id VARCHAR(10);
    DECLARE @ticket_id VARCHAR(20);
    DECLARE @ticket_price INT;

    -- Check if the show exists and has enough available seats
    SELECT @available_tickets = available_seats
    FROM tbl_shows
    WHERE show_id = @show_id AND available_seats >= @total_tickets;

    IF @available_tickets IS NULL
    BEGIN
        RAISERROR('Tickets not available for the selected show', 16, 1);
        RETURN;
    END

    -- Reduce the available seats for the show
    UPDATE tbl_shows
    SET available_seats = available_seats - @total_tickets
    WHERE show_id = @show_id;

    -- Calculate the total price for the booking
    SELECT @ticket_price = price
    FROM tbl_shows
    WHERE show_id = @show_id;

    DECLARE @total_price INT;
    SET @total_price = @ticket_price * @total_tickets;

    -- Insert the booking record
	DECLARE @countBookingtbl INT
    SELECT @countBookingtbl= COUNT(*) FROM tbl_bookings;
    SET @booking_id = CONCAT('b', @countBookingtbl+1);
    INSERT INTO tbl_bookings (booking_id, user_id, show_id, total_tickets, total_price, payment_status)
    VALUES (@booking_id, @user_id, @show_id, @total_tickets, @total_price, 'success');

    -- Insert the ticket records
    DECLARE @i INT;
    SET @i = 1;
    WHILE @i <= @total_tickets
    BEGIN
	   DECLARE @counttickettbl INT
       SELECT @counttickettbl= COUNT(*) FROM tbl_ticket;
       SET @ticket_id = CONCAT('t', @counttickettbl+1);
        INSERT INTO tbl_Ticket (Ticket_ID, Booking_ID, Price)
        VALUES (@ticket_id, @booking_id, @ticket_price);
        SET @i = @i + 1;
    END

    -- Return the booking ID to the caller
    SELECT @booking_id AS booking_id;
END


EXEC check_and_book_tickets 'u7', 'sh4', 5
SELECT * FROM tbl_bookings
SELECT * FROM tbl_ticket

