--Online Movie Booking System
-- Users table
CREATE TABLE tbl_Users (
    user_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone_number CHAR(10) NOT NULL UNIQUE CHECK (phone_number LIKE '[6789]%' AND LEN(phone_number) = 10),
    created_at SMALLDATETIME DEFAULT GETDATE()
);
ALTER TABLE tbl_Users
ADD CONSTRAINT CHK_EmailHasAtSymbol CHECK (email LIKE '%@%');
INSERT INTO tbl_Users (user_Id, name, email, phone_number) VALUES 
  ('U1', 'johnsmith', 'johnsmith@example.com', '9876457888'),
  ('U2', 'janesmith', 'janesmith@example.com', '9886457898'),
  ('U3', 'alex', 'alex@example.com', '9876447808'),
  ('U4', 'alicewonderland', 'alice@example.com', '9888457898'),
  ('U5', 'johndoe', 'johndoe@example.com', '9876499898'),
  ('U6', 'janedoe', 'janedoe@example.com', '9876457898'),
  ('U7', 'franklinjones', 'franklin@example.com', '9873457898'),
  ('U8', 'jessicajones', 'jessica@example.com', '9996457898'),
  ('U9', 'clarkkent', 'clarkkent@example.com', '9870057898'),
  ('U10', 'dianaprince', 'diana@example.com', '9876457800');


-- Theatres table
CREATE TABLE tbl_Theatres (
    theatre_id VARCHAR(10) PRIMARY KEY,
    theatre_name VARCHAR(30) NOT NULL,
    theatre_address VARCHAR(200) NOT NULL
);
INSERT INTO tbl_Theatres (theatre_id, theatre_name, theatre_address)
VALUES 
  ('T1', 'PVR Cinemas', 'kormangala,Banglore'),
  ('T2', 'PVP', 'Mallathahalli,Banglore'),
  ('T3', 'INOX', 'Koramangala,Banglore'),
  ('T4', 'Cinepollis', 'Koramangala,Banglore'),
  ('T5', 'Metro Inox Cinemas', 'Koramangala,Banglore');


-- Movies table
CREATE TABLE tbl_Movies (
    movie_id VARCHAR(10) PRIMARY KEY,
    title VARCHAR(30) NOT NULL,
    description VARCHAR(1000) NOT NULL,
    duration TINYINT NOT NULL,
    release_date DATE NOT NULL
);
INSERT INTO tbl_Movies (movie_id, title, description, duration, release_date)
VALUES
('M1', 'Avengers: Endgame', 'The Avengers must undo Thanos'' actions and restore order to the universe', 182, '2023-04-26'),
('M2', 'The Dark Knight', 'Batman fights the Joker in a battle for Gotham City', 152, '2023-04-25'),
('M3', 'The Godfather', 'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son', 175, '2023-04-18'),
('M4', 'Inception', 'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.', 148, '2023-05-05'),
('M5', 'Titanic', 'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic', 194, '2023-05-01');


-- Screens table
CREATE TABLE tbl_Screens (
    screen_id VARCHAR(10) PRIMARY KEY,
    theatre_id VARCHAR(10) NOT NULL,
    screen_name VARCHAR(30) NOT NULL,
    capacity SMALLINT NOT NULL,
    FOREIGN KEY (theatre_id) REFERENCES tbl_Theatres(theatre_id)
);
INSERT INTO tbl_Screens (screen_id, theatre_id, screen_name, capacity)
VALUES
('sc1', 't1', 'Screen 1', 80),
('sc2','t1', 'Screen 2', 80),
('sc3', 't2', 'Screen 1', 100),
('sc4', 't3', 'Screen 1', 100),
('sc5', 't4', 'Screen 1', 100),
('sc6', 't2', 'Screen 2', 100),
('sc7', 't3', 'Screen 2', 100),
('sc8', 't4', 'Screen 2', 100);


-- Shows table
CREATE TABLE tbl_Shows (
    show_id VARCHAR(10) PRIMARY KEY,
    movie_id VARCHAR(10) NOT NULL,
    screen_id VARCHAR(10) NOT NULL,
	theatre_id VARCHAR(10) NOT NULL,
	show_time SMALLDATETIME NOT NULL,
    price SMALLINT NOT NULL,
    available_seats SMALLINT NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES tbl_Movies(movie_id),
    FOREIGN KEY (screen_id) REFERENCES tbl_Screens(screen_id),
	FOREIGN KEY (theatre_id) REFERENCES tbl_Theatres(theatre_id)
);
INSERT INTO tbl_Shows (show_id, movie_id, screen_id, theatre_id, show_time, price, available_seats)
VALUES
('sh1', 'm1', 'sc1', 't1', '2023-05-24 09:00:00', 200, 80),
('sh2', 'm2', 'sc2', 't1', '2023-05-23 09:30:00', 200, 80),
('sh3', 'm3', 'sc3', 't2', '2023-05-24 12:30:00', 200, 100),
('sh4', 'm4', 'sc4', 't3', '2023-05-23 12:00:00', 200, 100),
('sh5', 'm5', 'sc5', 't4', '2023-05-23 14:30:00', 200, 100),
('sh6', 'm1', 'sc6', 't2', '2023-05-23 16:30:00', 200, 100),
('sh7', 'm2', 'sc7', 't3', '2023-05-24 21:30:00', 200, 100),
('sh8', 'm1', 'sc8', 't4', '2023-05-24 18:00:00', 200, 100),
('sh9', 'm1', 'sc1', 't1', '2023-05-30 09:00:00', 200, 80),
('sh10', 'm2', 'sc1', 't1', '2023-05-30 14:00:00', 200, 80),
('sh11', 'm3', 'sc2', 't1', '2023-05-31 18:00:00', 200, 100),
('sh12', 'm4', 'sc3', 't2', '2023-05-30 18:00:00', 200, 100),
('sh13', 'm5', 'sc4', 't3', '2023-05-31 18:00:00', 200, 100);




-- Bookings table
CREATE TABLE tbl_Bookings (
    booking_id VARCHAR(10) PRIMARY KEY,
    user_id VARCHAR(10) NOT NULL,
    show_id VARCHAR(10) NOT NULL,
    payment_status VARCHAR(10),
    total_tickets TINYINT NOT NULL CHECK (total_tickets >= 0 AND total_tickets <= 10),
    total_price SMALLINT NOT NULL,
    booking_time SMALLDATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES tbl_Users(user_id),
    FOREIGN KEY (show_id) REFERENCES tbl_Shows(show_id)
);
-- Inserting records into tbl_bookings
INSERT INTO tbl_Bookings(booking_id,user_id, show_id, total_tickets, total_price,payment_status)
VALUES
('b1', 'u1', 'sh1',5, 1000,'success'),
('b2', 'u2', 'sh2',5, 1000,'success'),
('b3', 'u3', 'sh3',3, 600,'success'),
('b4', 'u4', 'sh4',1, 200,'success'),
('b5', 'u5', 'sh5',4, 800,'success'),
('b6', 'u7', 'sh2',2, 400,'success'),
('b7', 'u8', 'sh3',2, 400,'success');


CREATE TABLE tbl_Ticket (
    Ticket_ID VARCHAR(10) PRIMARY KEY,
    Booking_ID VARCHAR(10),
	Show_ID VARCHAR(10) NOT NULL,
    Seat_Number VARCHAR(10) NOT NULL,
    Price SMALLINT NOT NULL,
    FOREIGN KEY (Booking_ID) REFERENCES tbl_Bookings(Booking_ID),
    FOREIGN KEY (Show_ID) REFERENCES tbl_Shows(Show_ID),
    CONSTRAINT UC_Ticket UNIQUE (Seat_Number, Show_ID)
);
INSERT INTO tbl_Ticket VALUES
('tk1','b1','sh1','s1',200),
('tk2','b1','sh1','s2',200),
('tk3','b1','sh1','s3',200),
('tk4','b1','sh1','s4',200),
('tk5','b1','sh1','s5',200),
('tk6','b2','sh2','s1',200),
('tk7','b2','sh2','s2',200),
('tk8','b2','sh2','s3',200),
('tk9','b2','sh2','s4',200),
('tk10','b2','sh2','s5',200),
('tk11','b3','sh3','s1',200),
('tk12','b3','sh3','s2',200),
('tk13','b3','sh3','s3',200),
('tk14','b4','sh4','s1',200),
('tk15','b5','sh5','s1',200),
('tk16','b5','sh5','s2',200),
('tk17','b5','sh5','s3',200),
('tk18','b5','sh5','s4',200),
('tk19','b6','sh2','s6',200),
('tk20','b6','sh2','s7',200),
('tk21','b7','sh3','s4',200),
('tk22','b7','sh3','s5',200);


-- Reviews table
CREATE TABLE tbl_Reviews (
    review_id VARCHAR(10) PRIMARY KEY,
    movie_id VARCHAR(10) NOT NULL,
    user_id VARCHAR(10) NOT NULL,
    rating TINYINT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment VARCHAR(1000),
    FOREIGN KEY (user_id) REFERENCES tbl_Users(user_Id),
    FOREIGN KEY (movie_id) REFERENCES tbl_Movies(movie_id),
    CONSTRAINT review_info UNIQUE(user_id,movie_id)
);
SELECT * FROM tbl_Reviews
DELETE FROM tbl_Reviews
/*
INSERT INTO tbl_Reviews (review_id,movie_id, user_id, rating, comment)
VALUES
('r1','m1', 'u1', 4, 'Great movie! The action scenes were amazing.'),
('r2','m1', 'u2', 5, 'This is one of the best movies I have ever seen.'),
('r3','m1', 'u3', 4, 'I enjoyed the movie overall, but the ending was a bit disappointing.'),
('r4','m2', 'u4', 4, 'A classic movie with great performances by the actors.'),
('r5','m2', 'u5', 3, 'I expected more from this movie.'),
('r6','m3', 'u6', 5, 'A masterpiece. The acting and direction were superb.'),
('r7','m3', 'u7', 4, 'The Godfather is a classic for a reason.'),
('r8','m4', 'u8', 4, 'A mind-bending movie with a great storyline.'),
('r9','m4', 'u9', 3, 'I had a hard time following the movie at times.'),
('r10','m5', 'u10', 5, 'A beautiful and heart-wrenching love story.');
*/



CREATE TABLE tbl_MovieRevenue (
    revenue_id VARCHAR(10) PRIMARY KEY,
    movie_id VARCHAR(10) NOT NULL,
    start_date SMALLDATETIME NOT NULL,
    end_date SMALLDATETIME NOT NULL,
    revenue DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES tbl_Movies(movie_id)
);
SELECT * FROM tbl_MovieRevenue



--STORED PROC 1
CREATE PROCEDURE uspGetMovieNamesWithTheatreInfo
AS  
BEGIN  
    SELECT m.title, t.theatre_name, t.theatre_address
    FROM tbl_movies m
    INNER JOIN tbl_shows s ON m.movie_id = s.movie_id
    INNER JOIN tbl_theatres t ON s.theatre_id = t.theatre_id
    WHERE s.show_time > GETDATE()
END 

EXEC uspGetMovieNamesWithTheatreInfo;


--STORED PROC 2
CREATE PROCEDURE uspGetShowInfoByMovieNameWithTheatreInfo
    @movie_name VARCHAR(30)
AS
BEGIN
    SELECT tbl_shows.show_id, tbl_shows.show_time, tbl_theatres.theatre_name, tbl_theatres.theatre_address
    FROM tbl_shows
    INNER JOIN tbl_movies ON tbl_shows.movie_id = tbl_movies.movie_id
    INNER JOIN tbl_theatres ON tbl_shows.theatre_id = tbl_theatres.theatre_id
    WHERE tbl_movies.title = @movie_name
    AND tbl_shows.show_time > GETDATE()
END

EXEC uspGetShowInfoByMovieNameWithTheatreInfo 'The Dark Knight';



--Stored proc 3
CREATE PROCEDURE uspGetShowsWithTheatreInfo
AS
BEGIN
    SELECT s.show_id, m.title AS movie_name, t.theatre_name, t.theatre_address, s.show_time
    FROM tbl_shows s
    INNER JOIN tbl_movies m ON s.movie_id = m.movie_id
    INNER JOIN tbl_theatres t ON s.theatre_id = t.theatre_id
    WHERE s.show_time > GETDATE()
END

EXEC uspGetShowsWithTheatreInfo;


--STORED PROC 4
CREATE PROCEDURE uspGetAverageReviewByMovieName
    @movie_name VARCHAR(30)
AS
BEGIN
    SELECT ROUND(AVG(CAST(rating AS DECIMAL(10,1))), 1) AS avg_rating
    FROM tbl_reviews r
    INNER JOIN tbl_movies m ON r.movie_id = m.movie_id
    WHERE m.title = @movie_name;
END

EXEC uspGetAverageReviewByMovieName 'Avengers: Endgame';


--STORED PROC 5
CREATE PROCEDURE uspCheckAndBookTickets
    @user_id VARCHAR(10),
    @show_id VARCHAR(10),
    @total_tickets INT
AS
BEGIN
    DECLARE @available_tickets INT;
    DECLARE @booking_id VARCHAR(10);
    DECLARE @ticket_id VARCHAR(20);
    DECLARE @ticket_price INT;
    DECLARE @show_time SMALLDATETIME;
    DECLARE @current_date SMALLDATETIME;
    DECLARE @max_seat_number INT;
	DECLARE @max_ticket_number INT;
	DECLARE @max_booking_number INT;

    -- Check if the show exists and retrieve show time
    SELECT @available_tickets = available_seats, @show_time = show_time
    FROM tbl_shows
    WHERE show_id = @show_id;

    IF @available_tickets IS NULL
    BEGIN
        RAISERROR('Tickets not available for the selected show', 16, 1);
        RETURN;
    END

    -- Check if the current date is less than show time
    SET @current_date = GETDATE();

    IF @current_date >= @show_time
    BEGIN
        RAISERROR('Cannot book tickets for a past or ongoing show', 16, 1);
        RETURN;
    END

    -- Check if the show has enough available seats
    IF @available_tickets < @total_tickets
    BEGIN
        RAISERROR('Insufficient seats available for the selected show', 16, 1);
        RETURN;
    END

    -- Reduce the available seats for the show
    UPDATE tbl_shows
    SET available_seats = available_seats - @total_tickets
    WHERE show_id = @show_id;

    -- Calculate the total price for the booking
    SELECT @ticket_price = price
    FROM tbl_shows
    WHERE show_id = @show_id;

    DECLARE @total_price INT;
    SET @total_price = @ticket_price * @total_tickets;

	-- Retrieve the max available booking number
    SELECT @max_booking_number = ISNULL(MAX(CAST(SUBSTRING(booking_id, 2, LEN(booking_id)) AS INT)), 0)
    FROM tbl_Bookings;
    -- Insert the booking record
	SET @max_booking_number= @max_booking_number+1;
    SET @booking_id = CONCAT('b', @max_booking_number);


    INSERT INTO tbl_bookings (booking_id, user_id, show_id, total_tickets, total_price, payment_status)
    VALUES (@booking_id, @user_id, @show_id, @total_tickets, @total_price, 'success');


	-- Retrieve the max available ticket number
    SELECT @max_ticket_number = ISNULL(MAX(CAST(SUBSTRING(Ticket_ID, 3, LEN(Ticket_ID)) AS INT)), 0)
    FROM tbl_ticket;
    -- Retrieve the max available seat number for the show
    SELECT @max_seat_number = ISNULL(MAX(CAST(SUBSTRING(Seat_Number, 2, LEN(Seat_Number)) AS INT)), 0)
    FROM tbl_ticket
    WHERE Show_ID = @show_id;

    -- Insert the ticket records with seat numbers
    DECLARE @i INT;
    SET @i = 1;
    WHILE @i <= @total_tickets
    BEGIN
        SET @max_seat_number = @max_seat_number + 1;
		SET @max_ticket_number= @max_ticket_number+1;
        SET @ticket_id = CONCAT('tk', @max_ticket_number);

        INSERT INTO tbl_Ticket (Ticket_ID, Booking_ID, Seat_Number, Price, Show_ID)
        VALUES (@ticket_id, @booking_id, CONCAT('s', @max_seat_number), @ticket_price, @show_id);

        SET @i = @i + 1;
    END

    -- Return the booking ID to the caller
    SELECT @booking_id AS booking_id;
END


EXEC uspCheckAndBookTickets 'U6', 'sh12', 5
SELECT * FROM tbl_bookings
SELECT * FROM tbl_ticket


--STORED PROC 6
CREATE PROCEDURE uspCalculateMovieTotalRevenue
    @movie_name VARCHAR(30)
AS
BEGIN
    SELECT SUM(total_price) AS revenue
    FROM tbl_Bookings
    INNER JOIN tbl_Shows ON tbl_Bookings.show_id = tbl_Shows.show_id
    INNER JOIN tbl_Movies ON tbl_Shows.movie_id = tbl_Movies.movie_id
    WHERE tbl_Movies.title = @movie_name
END

EXEC uspCalculateMovieTotalRevenue 'The Dark Knight'

SELECT *
FROM tbl_Bookings
    INNER JOIN tbl_Shows ON tbl_Bookings.show_id = tbl_Shows.show_id
    INNER JOIN tbl_Movies ON tbl_Shows.movie_id = tbl_Movies.movie_id
    WHERE tbl_Movies.title = 'The Dark Knight'

--STORED PROC 7
CREATE PROCEDURE uspGetMovieDateRange
    @movie_id VARCHAR(10),
    @first_date SMALLDATETIME OUTPUT,
    @last_date SMALLDATETIME OUTPUT
AS
BEGIN
    SELECT @first_date = MIN(show_time), @last_date = MAX(show_time)
    FROM tbl_Shows
    WHERE movie_id = @movie_id
END


DECLARE @start_date SMALLDATETIME
DECLARE @end_date SMALLDATETIME
EXEC uspGetMovieDateRange 'M2',@start_date OUTPUT,@end_date OUTPUT
PRINT @start_date
PRINT @end_date


--STORED PROC 8
CREATE PROCEDURE uspCalculateMovieRevenueBetweenDate
    @movie_id VARCHAR(10)
AS
BEGIN
    DECLARE @start_date SMALLDATETIME
    DECLARE @end_date SMALLDATETIME
    DECLARE @revenue DECIMAL(10, 2)

    -- Call uspGetMovieDateRange to get the first and last date of the movie
    EXEC uspGetMovieDateRange @movie_id, @start_date OUTPUT, @end_date OUTPUT

    -- Calculate the revenue between the retrieved start and end dates
    SELECT @revenue = SUM(total_price)
    FROM tbl_Bookings
    INNER JOIN tbl_Shows ON tbl_Bookings.show_id = tbl_Shows.show_id
    WHERE tbl_Shows.movie_id = @movie_id
        AND tbl_Bookings.booking_time BETWEEN @start_date AND @end_date

    -- Retrieve the max available revenue number
    DECLARE @max_revenue_number INT;
    DECLARE @revenue_id VARCHAR(10);
    SELECT @max_revenue_number = ISNULL(MAX(CAST(SUBSTRING(revenue_id, 2, LEN(revenue_id)) AS INT)), 0)
    FROM tbl_MovieRevenue;
	
    -- Increment the revenue number and construct the revenue ID
    SET @max_revenue_number = @max_revenue_number + 1;
    SET @revenue_id = CONCAT('r', @max_revenue_number);

    -- Insert the revenue record into tbl_MovieRevenue
    INSERT INTO tbl_MovieRevenue (revenue_id, movie_id, start_date, end_date, revenue)
    VALUES (@revenue_id, @movie_id, @start_date, @end_date, @revenue)
END


EXEC uspCalculateMovieRevenueBetweenDate 'm1'
EXEC uspCalculateMovieRevenueBetweenDate 'm2'
EXEC uspCalculateMovieRevenueBetweenDate 'm3'
EXEC uspCalculateMovieRevenueBetweenDate 'm4'
EXEC uspCalculateMovieRevenueBetweenDate 'm5'
select * from tbl_MovieRevenue
DELETE FROM tbl_MovieRevenue






--Audit table for movies
CREATE TABLE tbl_Movies_Audit(Id INT IDENTITY, AuditData VARCHAR(1000));
SELECT * FROM tbl_Movies_Audit;

--Triggers
--Insert Trigger
CREATE TRIGGER tr_tbl_Movies_ForInsert
ON tbl_movies
FOR INSERT
AS
BEGIN
DECLARE @Id VARCHAR(10)
SELECT @Id=movie_Id FROM inserted
INSERT INTO tbl_Movies_Audit VALUES(' New movie with Id= '+@ID+' is added at '+CAST(GETDATE() AS VARCHAR))
END


INSERT INTO tbl_movies (movie_id, title, description, duration, release_date) VALUES ('M6', 'Forrest Gump', 'The presidencies of Kennedy and Johnson, the events of Vietnam, Watergate, and other historical events unfold through the perspective of an Alabama man with an IQ of 75.', 142, '2023-04-20');
SELECT * FROM tbl_movies;
SELECT * FROM tbl_Movies_Audit;

--Delete Trigger
CREATE TRIGGER tr_tbl_Movies_ForDelete
ON tbl_movies
FOR DELETE
AS
BEGIN
DECLARE @Id VARCHAR(10)
SELECT @Id=movie_Id FROM deleted
INSERT INTO tbl_Movies_Audit VALUES(' An Existing movie with Id= '+@ID+' is deleted at '+CAST(GETDATE() AS VARCHAR))
END

DELETE FROM tbl_movies WHERE movie_id='M6';
SELECT * FROM tbl_movies;
SELECT * FROM tbl_Movies_Audit;



CREATE TABLE tbl_users_Audit(Id INT IDENTITY, AuditData VARCHAR(1000));
SELECT * FROM tbl_users_Audit;

--Insert Trigger
CREATE TRIGGER tr_tbl_Users_ForInsert
ON tbl_users
FOR INSERT
AS
BEGIN
DECLARE @Id varchar(10)
SELECT @Id=User_Id FROM inserted
INSERT INTO tbl_users_Audit VALUES(' New User with Id= '+CAST(@ID AS VARCHAR)+' is added at '+CAST(GETDATE() AS VARCHAR))
END


INSERT INTO tbl_users (user_Id, Name, email, phone_number) VALUES ('U11', 'alex', 'alexd@example.com', '8876400800');
SELECT * FROM tbl_users;
SELECT * FROM tbl_users_Audit;


--Delete Trigger
CREATE TRIGGER tr_tbl_Users_ForDelete
ON tbl_users
FOR DELETE
AS
BEGIN
DECLARE @Id VARCHAR(10)
SELECT @Id=User_Id FROM deleted
INSERT INTO tbl_users_Audit VALUES(' An Existing user with Id= '+CAST(@ID AS VARCHAR)+' is deleted at '+CAST(GETDATE() AS VARCHAR))
END

DELETE FROM tbl_users WHERE USER_ID='U11';
SELECT * FROM tbl_users_Audit;


--UPDATE Trigger
CREATE TRIGGER tr_tbl_Users_ForUpdate
ON tbl_users
FOR UPDATE
AS
BEGIN
DECLARE @userId VARCHAR(10)
DECLARE @OldName VARCHAR (30), @NewName VARCHAR(30)
DECLARE @OldEmail VARCHAR (30), @NewEmail VARCHAR(30)
DECLARE @OldphoneNumber VARCHAR (30), @NewphoneNumber VARCHAR(30)

DECLARE @AuditText VARCHAR(1000);

SELECT * INTO #TempTable FROM inserted

WHILE(EXISTS(SELECT @userId FROM #TempTable))
BEGIN
SET @AuditText=''

SELECT TOP 1 @userId=user_Id,@NewName=name,@NewEmail=email,@NewphoneNumber=phone_number FROM #TempTable
SELECT @OldName=name,@OldEmail=email,@OldphoneNumber=phone_number FROM deleted WHERE user_Id=@userId

SET @AuditText = ' user  with id= ' +@userId+' Changed'

if(@OldName<> @NewName)
SET @AuditText = @AuditText+ ' name from '+@OldName+ ' to '+ @NewName

if(@OldEmail<> @NewEmail)
SET @AuditText = @AuditText+ ' email from '+@OldEmail+ ' to '+ @NewEmail

if(@OldphoneNumber<> @NewphoneNumber)
SET @AuditText = @AuditText+ ' number from '+@OldphoneNumber+ ' to '+ @NewphoneNumber
INSERT INTO tbl_users_Audit VALUES (@AuditText)
DELETE FROM #TempTable WHERE user_Id=@UserId
END
END


UPDATE tbl_users SET Name='JANE',phone_number='9899329123'  WHERE user_id='U11';

SELECT * FROM tbl_users;
SELECT * FROM tbl_users_Audit


--DDL TRIGGER
--Audit Table for DDL Triggers
CREATE TABLE tbl_DB_Audit(
databaseName VARCHAR(30),
tableName VARCHAR(30),
eventType VARCHAR(30),
loginName VARCHAR(30),
sqlCommand VARCHAR(2000),
auditDateTime DATETIME
);

--DDL TRIGGER
CREATE TRIGGER tr_tblAudit
ON DATABASE
FOR CREATE_TABLE,ALTER_TABLE,DROP_TABLE
AS
BEGIN
DECLARE @EventData XML
SELECT @EventData = EVENTDATA();

INSERT INTO tbl_DB_Audit (databaseName,tableName,eventType,loginName,sqlCommand,auditDateTime) VALUES
(
@EventData.value('(/EVENT_INSTANCE/DatabaseName)[1]','VARCHAR(30)'),
@EventData.value('(/EVENT_INSTANCE/ObjectName)[1]','VARCHAR(30)'),
@EventData.value('(/EVENT_INSTANCE/EventType)[1]','VARCHAR(30)'),
@EventData.value('(/EVENT_INSTANCE/LoginName)[1]','VARCHAR(30)'),
@EventData.value('(/EVENT_INSTANCE/TSQLCommand)[1]','VARCHAR(2000)'),
GETDATE()
)
END

ALTER TABLE tbl_Users ALTER COLUMN name VARCHAR(30);
SELECT * FROM tbl_DB_Audit;



SELECT * FROM tbl_Ticket


--Functions
--Function1
ALTER FUNCTION dbo.fn_GetTotalRevenueForTheatre (@theatre_id VARCHAR(10))
RETURNS DECIMAL(10, 2)
AS
BEGIN
    DECLARE @revenue DECIMAL(10, 2);

    SELECT @revenue = SUM(b.total_price)
    FROM tbl_Bookings AS b
    INNER JOIN tbl_Shows AS s ON b.show_id = s.show_id
    WHERE s.theatre_id = @theatre_id
        AND b.payment_status = 'success';

    RETURN @revenue;
END;

PRINT dbo.fn_GetTotalRevenueForTheatre('t1');

--Function2
CREATE FUNCTION fn_GetUserTotalBookings(@user_id VARCHAR(10))
RETURNS INT
AS
BEGIN
    DECLARE @total_bookings INT;

    SELECT @total_bookings = COUNT(*)
    FROM tbl_Bookings
    WHERE user_id = @user_id;

    RETURN @total_bookings;
END;
PRINT dbo.fn_GetUserTotalBookings('u5');



--Function3
ALTER FUNCTION fn_CalculateTotalRevenueForUser(@user_id VARCHAR(10))
RETURNS DECIMAL(10, 2)
AS
BEGIN
    DECLARE @total_revenue DECIMAL(10, 2);

    SELECT @total_revenue = SUM(total_price)
    FROM tbl_Bookings
    WHERE user_id = @user_id AND payment_status = 'success';

    RETURN @total_revenue;
END;
PRINT dbo.fn_CalculateTotalRevenueForUser('u1');


--Function4
ALTER FUNCTION fn_GetUserBookingHistory(@user_id VARCHAR(10))
RETURNS TABLE
AS
RETURN
(
    SELECT b.booking_id, m.title, s.show_time, b.total_tickets, b.total_price, b.booking_time
    FROM tbl_Bookings AS b
    INNER JOIN tbl_Shows AS s ON b.show_id = s.show_id
    INNER JOIN tbl_Movies AS m ON s.movie_id = m.movie_id
    WHERE b.user_id = @user_id
);

SELECT * FROM fn_GetUserBookingHistory('u5');


--VIEWS
--VIEW1
ALTER VIEW vw_UserReviewsByMovie AS
SELECT m.movie_id, m.title, u.user_id, u.name, r.rating, r.comment
FROM tbl_Movies AS m
INNER JOIN tbl_Reviews AS r ON m.movie_id = r.movie_id
INNER JOIN tbl_Users AS u ON r.user_id = u.user_id;

SELECT * FROM vw_UserReviewsByMovie;

--VIEW2
CREATE VIEW vw_PopularTheatres AS
SELECT t.theatre_id, t.theatre_name, COUNT(*) AS total_bookings
FROM tbl_Theatres AS t
INNER JOIN tbl_Screens AS sc ON t.theatre_id = sc.theatre_id
INNER JOIN tbl_Shows AS s ON sc.screen_id = s.screen_id
INNER JOIN tbl_Bookings AS b ON s.show_id = b.show_id
GROUP BY t.theatre_id, t.theatre_name;

SELECT * FROM vw_PopularTheatres ORDER BY total_bookings DESC;


--VIEW3
CREATE VIEW vw_UserDetailsWithBookingSummary AS
SELECT u.user_id, u.name, u.email, COUNT(b.booking_id) AS total_bookings, SUM(b.total_tickets) AS total_tickets, SUM(b.total_price) AS total_price
FROM tbl_Users AS u
INNER JOIN tbl_Bookings AS b ON u.user_id = b.user_id
GROUP BY u.user_id, u.name, u.email;

SELECT * FROM vw_UserDetailsWithBookingSummary


--VIEW4
ALTER VIEW vw_TopRatedMovies AS
SELECT m.movie_id, m.title, CAST(AVG(CAST(r.rating AS DECIMAL(10, 2))) AS DECIMAL(10, 1)) AS average_rating
FROM tbl_Movies AS m
INNER JOIN tbl_Reviews AS r ON m.movie_id = r.movie_id
GROUP BY m.movie_id, m.title
HAVING AVG(r.rating) >= 4.0;

SELECT * FROM vw_TopRatedMovies
