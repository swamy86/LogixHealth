--Create DEPARTMENT table
CREATE TABLE tbl_department(
deptno INT PRIMARY KEY,
dname VARCHAR(30),
loc VARCHAR(30)
);
--Create employee table
CREATE TABLE tbl_employee(
empno INT PRIMARY KEY,
ename VARCHAR(30),
job VARCHAR(30),
manager INT,
hiredate DATE,
salary INT,
commission INT,
deptno INT FOREIGN KEY REFERENCES tbl_department(deptno)
);

--Task:can we use table table variables in a function.
--Conclusion: You can use temporary variables in funtions.
CREATE FUNCTION fn_GetTotalRecords()
RETURNS INT
AS
BEGIN
    DECLARE @total_count INT;

    SELECT @total_count = COUNT(*)
    FROM tbl_employee

    RETURN @total_count;
END;
PRINT dbo.fn_GetTotalRecords();

--2
--conclusion:we can use function in stored proc
--function
CREATE FUNCTION fn_CalculateTotalSalary(@departmentId INT)
RETURNS INT
BEGIN
  DECLARE @totalSalary INT;

  SELECT @totalSalary= SUM(salary)
  FROM tbl_employee
  WHERE deptno = @departmentId;
  
  RETURN @totalSalary;
END;

PRINT dbo.calculateTotalSalary(10)


-- stored procedure that uses the function
ALTER PROCEDURE spGetDepartmentTotalSalary(@departmentId INT)
AS
BEGIN
  DECLARE @totalSalary INT;
  -- Call the function
  SET @totalSalary = dbo.fn_CalculateTotalSalary(@departmentId);
  -- Display the result
  SELECT CONCAT('Total salary for department ', @departmentId, ' is ', @totalSalary);
END;

EXEC spGetDepartmentTotalSalary 10

--3
-- Create a function that attempts to call a stored procedure
--conclusion:not possible to call stored proc in a function
CREATE FUNCTION fn_CallStoredProc()
RETURNS INT
AS
BEGIN
  --call stored procedure
  EXEC spGetDepartmentTotalSalary 10;
  
  RETURN 0;
END;

PRINT dbo.fn_StoredProc()

--4
--Task:Create a stored proc. use stored proc in a trigger.
--Conclusion: we can execute sp in a triggger.
-- Create a stored procedure
ALTER PROCEDURE spUpdateDepartmentLocation
  @deptno INT
AS
BEGIN
  UPDATE tbl_department
  SET loc = 'Hyderabad'
  WHERE deptno = @deptno;
END;
-- Create a trigger
ALTER TRIGGER tr_tbl_Department_ForInsert
ON tbl_department
FOR INSERT
AS
BEGIN
  DECLARE @deptno INT;
  SELECT @deptno = deptno FROM inserted;
  --execute sp within the trigger
  EXEC spUpdateDepartmentLocation @deptno;
END;


select * from tbl_department

BEGIN TRAN
INSERT INTO tbl_department VALUES(70,'Marketing','Pune');

ROLLBACK


--5
--join function and table
CREATE FUNCTION fn_EmployeeDetails(@jobname VARCHAR(20))
RETURNS TABLE
AS
RETURN(SELECT * FROM tbl_employee WHERE job = @jobname)

SELECT f1.*,dname FROM fn_EmployeeDetails('Analyst') f1 inner join tbl_department d ON f1.deptno=d.deptno

--6
--cross apply
--similar to inner join
SELECT * FROM tbl_department D 
CROSS APPLY 
   ( SELECT * FROM tbl_employee E WHERE E.deptno = D.deptno ) A 

SELECT * FROM tbl_department D 
INNER JOIN tbl_employee E ON D.deptno = E.deptno

--outer apply
--similar to outer join
SELECT * FROM tbl_department D 
OUTER APPLY ( SELECT * FROM tbl_employee E WHERE E.deptno = D.deptno ) A
 
SELECT * FROM tbl_department D 
LEFT OUTER JOIN tbl_employee E ON D.deptno = E.deptno 

--7
--instead of trigger

ALTER TRIGGER tr_DepartmentInsert
ON tbl_department
INSTEAD OF INSERT
AS
BEGIN
  INSERT INTO tbl_department (deptno, dname, loc)
  SELECT deptno, dname, loc
  FROM inserted;
END


BEGIN TRAN
INSERT INTO tbl_department VALUES (70, 'Sales', 'Pune');

ROLLBACK
SELECT * FROM tbl_department;
